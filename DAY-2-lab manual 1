SAVEETHA SCHOOL OF ENGINEERING
SAVEETHA INSTITUTE OF MEDICAL AND TECHNICAL SCIENCES
ITA0443 - STATISTICS WITH R PROGRAMMING FOR REAL TIME PROBLEM
DAY 2 – LAB EXERCISES

NAME: S. MADHU BHARGAVA
REG.NO: 191911440
DEPT: CSE
GITHUBLINK: https://github.com/bhargavsanam33/ITA0443-R-programming-191911440/new/main


1. Demonstrate Vector Recycling in R.
CODE:
A=10:14
B=3:5
print(A+B)
OUTPUT:
> A=10:14
> B=3:5
> print(A+B)
[1] 13 15 17 16 18

2. Demonstrate the usage of apply function in R
CODE:
matri_x <- matrix(C<-(1:10),nrow=3, ncol=10)
print( "sample matrix:")
matri_x
print("sum across rows:")
apply( matri_x, 1, sum)
print("mean across columns:")
apply( matri_x, 2, mean)
OUTPUT:
> matri_x <- matrix(C<-(1:10),nrow=3, ncol=10)
> print( "sample matrix:")
[1] "sample matrix:"
> matri_x
     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]
[1,]    1    4    7   10    3    6    9    2    5     8
[2,]    2    5    8    1    4    7   10    3    6     9
[3,]    3    6    9    2    5    8    1    4    7    10
> print("sum across rows:")
[1] "sum across rows:"
> apply( matri_x, 1, sum)
[1] 55 55 55
> print("mean across columns:")
[1] "mean across columns:"
> apply( matri_x, 2, mean)
 [1] 2.000000 5.000000 8.000000 4.333333 4.000000 7.000000 6.666667 3.000000
 [9] 6.000000 9.000000

3. Demonstrate the usage of lapply function in R
CODE:
names <- c("padmasri", "priya","nivetha", "tejea","fattima")
print( "original data:")
names
print("data after lapply():")
lapply(names, toupper)

OUTPUT:
> names <- c("padmasri", "priya","nivetha", "tejea","fattima")
> print( "original data:")
[1] "original data:"
> names
[1] "padmasri" "priya"    "nivetha"  "tejea"    "fattima" 
> print("data after lapply():")
[1] "data after lapply():"
> lapply(names, toupper)
[[1]]
[1] "PADMASRI"

[[2]]
[1] "PRIYA"

[[3]]
[1] "NIVETHA"

[[4]]
[1] "TEJEA"

[[5]]
[1] "FATTIMA"

4. Demonstrate the usage of sapply function in R
CODE:
df<- data.frame( x=c(1,2,3,4,5,6),y=c(12,7,5,4,8,9))
print( "original data:")
df
print("data after sapply():")
sapply(df, max)

OUTPUT:
> df<- data.frame( x=c(1,2,3,4,5,6),y=c(12,7,5,4,8,9))
> print( "original data:")
[1] "original data:"
> df
  x  y
1 1 12
2 2  7
3 3  5
4 4  4
5 5  8
6 6  9
> print("data after sapply():")
[1] "data after sapply():"
> sapply(df, max)
 x  y 
 6 12

5. Demonstrate the usage of tapply function in R

CODE:
library(tidyverse)
print(" Head of data:")
head(diamonds)
print("Average price for each cut of diamond:")
tapply(diamonds$price, diamonds$cut, mean)

OUTPUT:
> library(tidyverse)
> print(" Head of data:")
[1] " Head of data:"
> head(diamonds)
# A tibble: 6 × 10
  carat cut       color clarity depth table price     x     y     z
  <dbl> <ord>     <ord> <ord>   <dbl> <dbl> <int> <dbl> <dbl> <dbl>
1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43
2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31
3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31
4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63
5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75
6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48
> print("Average price for each cut of diamond:")
[1] "Average price for each cut of diamond:"
> tapply(diamonds$price, diamonds$cut, mean)
     Fair      Good Very Good   Premium     Ideal 
 4358.758  3928.864  3981.760  4584.258  3457.542 


6. Demonstrate the usage of mapply function in R

CODE:
x<-list(c(4, 3, 2, 1))
y<-list(c(6, 7, 8, 9))
result<-mapply(sum, x, y)
print(result)


OUTPUT:
> x<-list(c(4, 3, 2, 1))
> y<-list(c(6, 7, 8, 9))
> result<-mapply(sum, x, y)
> print(result)
[1] 40

7. Sum of Natural Numbers using Recursion

CODE:
s<-function(n){
  if (n<=1){
    return(n)
  }else{
    return(n+s(n-1))
  }
}
s(7)

OUTPUT:
> s<-function(n){
+   if (n<=1){
+     return(n)
+   }else{
+     return(n+s(n-1))
+   }
+ }
> s(7)
[1] 28

8. Write a program to generate Fibonacci sequence using Recursion in R

CODE:
rec <- function(n) {
  if(n <= 1) {
    return(n)
  } else {
    return(rec(n-1) + rec(n-2))
  }
}
nterms = as.integer(readline(prompt="How many terms? "))
if(nterms <= 0) {
  print("Plese enter a positive integer")
} else {
  print("Fibonacci sequence:")
  for(i in 0:(nterms-1)) {
    print(rec(i))
  }
}
OUTPUT:
How many terms? 9
[1] "Fibonacci sequence:"
[1] 0
[1] 1
[1] 1
[1] 2
[1] 3
[1] 5
[1] 8
[1] 13
[1] 21

9. Write a program to find factorial of a number in R using recursion.

CODE:
rec<- function(n) {
  if(n <= 1) {
    return(1)
  } else { 
    return(n * rec(n-1))
  }
}
rec(8)

OUTPUT:
> rec<- function(n) {
+   if(n <= 1) {
+     return(1)
+   } else { 
+     return(n * rec(n-1))
+   }
+ }
> rec(8)
[1] 40320
> 
       CREATION AND MANIPULATION OF DATAFRAMES IN R


Exercise 1
Consider two vectors: x=seq(1,43,along.with=Id)
y=seq(-20,0,along.with=Id)
Create a data frame ‘df’ as shown below.
&gt;df
Id Letter x y
1 1 a 1.000000 -20.000000
2 1 b 4.818182 -18.181818
3 1 c 8.636364 -16.363636
4 2 a 12.454545 -14.545455
5 2 b 16.272727 -12.727273
6 2 c 20.090909 -10.909091
7 3 a 23.909091 -9.090909
8 3 b 27.727273 -7.272727
9 3 c 31.545455 -5.454545
10 4 a 35.363636 -3.636364
11 4 b 39.181818 -1.818182
12 4 c 43.000000 0.000000


CODE:
Id <- rep(1:4, each = 3)
x=seq(1,43,along.with=Id)
y=seq(-20,0,along.with=Id)
Letter=rep(letters[1:3],4)

A<- data.frame(Id,Letter,x,y)
A
OUTPUT:
> Id <- rep(1:4, each = 3)
> x=seq(1,43,along.with=Id)
> y=seq(-20,0,along.with=Id)
> Letter=rep(letters[1:3],4)
> 
> A<- data.frame(Id,Letter,x,y)
> A
   Id Letter         x          y
1   1      a  1.000000 -20.000000
2   1      b  4.818182 -18.181818
3   1      c  8.636364 -16.363636
4   2      a 12.454545 -14.545455
5   2      b 16.272727 -12.727273
6   2      c 20.090909 -10.909091
7   3      a 23.909091  -9.090909
8   3      b 27.727273  -7.272727
9   3      c 31.545455  -5.454545
10  4      a 35.363636  -3.636364
11  4      b 39.181818  -1.818182
12  4      c 43.000000   0.000000
> 

Exercise 2

Using the data frame ‘df’ in Exercise1, Construct the following data frame. Id
x.ay.ax.by.bx.cy.c 1 1 1.00000 -20.000000 4.818182 -18.181818
8.636364 -16.363636 4 2 12.45455 -14.545455 16.272727 -12.727273
20.090909 -10.909091 7 3 23.90909 -9.090909 27.727273 -7.272727
31.545455 -5.454545 10 4 35.36364 -3.636364 39.181818 -1.818182
43.000000 0.000000

CODE:
reshape(df,timevar='Letter',idvar='Id',direction='wide')
OUTPUT:
> reshape(df,timevar='Letter',idvar='Id',direction='wide')
   Id      x.a        y.a       x.b        y.b       x.c        y.c
1   1  1.00000 -20.000000  4.818182 -18.181818  8.636364 -16.363636
4   2 12.45455 -14.545455 16.272727 -12.727273 20.090909 -10.909091
7   3 23.90909  -9.090909 27.727273  -7.272727 31.545455  -5.454545
10  4 35.36364  -3.636364 39.181818  -1.818182 43.000000   0.000000


Exercise 3
Create two data frame df1 and df2:
&gt; df1
Id Age
1 1 14
2 2 12
3 3 15
4 4 10
&gt; df2
Id Sex Code
1 1 F a
2 2 M b
3 3 M c
4 4 F d
From df1 and df2 create M:
&gt;M
Id Age Sex Code
1 1 14 F a
2 2 12 M b
3 3 15 M c 4 4 10 F d

CODE:
Id <- c(1:4)
Age <- c(14,12,15,10)
A<- data.frame(Id,Age)
Sex <- c("F","M","M","F")
Code <- letters[1:4]
B<- data.frame(Id,Sex,Code)
H<- merge(A,B, by = "Id")
H
OUTPUT:
> Id <- c(1:4)
> Age <- c(14,12,15,10)
> A<- data.frame(Id,Age)
> Sex <- c("F","M","M","F")
> Code <- letters[1:4]
> B<- data.frame(Id,Sex,Code)
> H<- merge(A,B, by = "Id")
> H
  Id Age Sex Code
1  1  14   F    a
2  2  12   M    b
3  3  15   M    c
4  4  10   F    d




Exercise 4
Create a data frame df3:
&gt; df3 id2
score 1 4
100
2 3 98
3 2 94
4 1 99
From M (used in Exercise-3) and df3 create N:
Id Age Sex Code score
1 1 14 F a 99
2 2 12 M b 94

3 3 15 M c 98 4 4 10 F d 100

CODE:
id2 <- 4:1
score <- c(100,98,94,99)
df3 <- data.frame(id2,score)

N=merge(H,df3,by.x='Id',by.y='id2')
N
OUTPUT:
> id2 <- 4:1
> score <- c(100,98,94,99)
> df3 <- data.frame(id2,score)
> 
> N=merge(H,df3,by.x='Id',by.y='id2')
> N
  Id Age Sex Code score
1  1  14   F    a    99
2  2  12   M    b    94
3  3  15   M    c    98
4  4  10   F    d   100

Exercise 5
Consider the previous one data frame N:
1) Remove the variables Sex and Code
2) From N, create a data frame:
values ind
1 1 Id
2 2 Id
3 3 Id
4 4 Id
5 14 Age
6 12 Age
7 15 Age
8 10 Age
9 99 score
10 94 score
11 98 score
12 100 score


CODE:
N[,c("Sex")]=NULL
N[,c("Code")]=NULL
stack(N)
OUTPUT:
> N[,c("Sex")]=NULL
> N[,c("Code")]=NULL
> stack(N)
   values   ind
1       1    Id
2       2    Id
3       3    Id
4       4    Id
5      14   Age
6      12   Age
7      15   Age
8      10   Age
9      99 score
10     94 score
11     98 score
12    100 score


Exercise 6
For this exercise, we’ll use the (built-in) dataset trees.
a) Make sure the object is a data frame, if not change it to a data frame.
b) Create a new data frame A:
&gt;A
Girth Height Volume
mean_tree 13.24839 76 30.17097
min_tree 8.30000 63 10.20000
max_tree 20.60000 87 77.00000
sum_tree 410.70000 2356 935.30000
CODE:
str(trees)
A <- trees
OUTPUT:
> str(trees)
'data.frame':	31 obs. of  3 variables:
 $ Girth : num  8.3 8.6 8.8 10.5 10.7 10.8 11 11 11.1 11.2 ...
 $ Height: num  70 65 63 72 81 83 66 75 80 75 ...
 $ Volume: num  10.3 10.3 10.2 16.4 18.8 19.7 15.6 18.2 22.6 19.9 ...
> A <- trees




Exercise 7
Consider the data frame A:
1)Order the entire data frame by the first column.
2)Rename the row names as follows: mean, min, max, tree


CODE:
A[order(A[,1]),]
row.names(A)
row.names(A) <- c("mean","min","max","tree")
OUTPUT:
> A[order(A[,1]),]
   Girth Height Volume
1    8.3     70   10.3
2    8.6     65   10.3
3    8.8     63   10.2
4   10.5     72   16.4
5   10.7     81   18.8
6   10.8     83   19.7
7   11.0     66   15.6
8   11.0     75   18.2
9   11.1     80   22.6
10  11.2     75   19.9
11  11.3     79   24.2
12  11.4     76   21.0
13  11.4     76   21.4
14  11.7     69   21.3
15  12.0     75   19.1
16  12.9     74   22.2
17  12.9     85   33.8
18  13.3     86   27.4
19  13.7     71   25.7
20  13.8     64   24.9
21  14.0     78   34.5
22  14.2     80   31.7
23  14.5     74   36.3
24  16.0     72   38.3
25  16.3     77   42.6
26  17.3     81   55.4
27  17.5     82   55.7
28  17.9     80   58.3
29  18.0     80   51.5
30  18.0     80   51.0
31  20.6     87   77.0
> row.names(A)
 [1] "1"  "2"  "3"  "4"  "5"  "6"  "7"  "8"  "9"  "10" "11" "12" "13" "14" "15" "16"
[17] "17" "18" "19" "20" "21" "22" "23" "24" "25" "26" "27" "28" "29" "30" "31"
> row.names(A) <- c("mean","min","max","tree")



Exercise 8
Create an empty data frame with column types:

&gt;df
IntsLogicals Doubles Characters
(or 0-length row.names)


CODE:
df <- data.frame(Ints=integer(), Logicals=logical(),Doubles=double(),Characters=character())
print(df)
OUTPUT:
> df <- data.frame(Ints=integer(), Logicals=logical(),Doubles=double(),Characters=character())
> 
> print(df)
[1] Ints       Logicals   Doubles    Characters
<0 rows> (or 0-length row.names)
> 


Exercise 9
Create a data frame XY
X=c(1,2,3,1,4,5,2)
Y=c(0,3,2,0,5,9,3)
&gt; XY
X Y
1 1 0
2 2 3
3 3 2
4 1 0
5 4 5
6 5 9
7 2 3
1) look at duplicated elements using a provided R function.
2) keep only the unique lines on XY using a provided R function.




CODE:
XY <- data.frame(X=c(1,2,3,1,4,5,2),Y=c(0,3,2,0,5,9,3))
XY
duplicated(XY)
unique(XY)
OUTPUT:
> XY <- data.frame(X=c(1,2,3,1,4,5,2),Y=c(0,3,2,0,5,9,3))
> XY
  X Y
1 1 0
2 2 3
3 3 2
4 1 0
5 4 5
6 5 9
7 2 3
> duplicated(XY)
[1] FALSE FALSE FALSE  TRUE FALSE FALSE  TRUE
> unique(XY)
  X Y
1 1 0
2 2 3
3 3 2
5 4 5
6 5 9



Exercise 10
Use the (built-in) dataset Titanic.
a) Make sure the object is a data frame, if not change it to a data frame.
b) Define a data frame with value 1st in Class variable, and value NO in Survived variable
and variables Sex, Age and Freq.
Sex Age Freq
1 Male Child 0
5 Female Child 0
9 Male Adult 118
13 Female Adult 4

CODE:
str(Titanic) 
Tit <- data.frame(Titanic)
df <- subset(Tit, subset = Class=='1st' & Survived=='No',select=c(Sex,Age,Freq))
df
OUTPUT:
> str(Titanic) 
 'table' num [1:4, 1:2, 1:2, 1:2] 0 0 35 0 0 0 17 0 118 154 ...
 - attr(*, "dimnames")=List of 4
  ..$ Class   : chr [1:4] "1st" "2nd" "3rd" "Crew"
  ..$ Sex     : chr [1:2] "Male" "Female"
  ..$ Age     : chr [1:2] "Child" "Adult"
  ..$ Survived: chr [1:2] "No" "Yes"
> Tit <- data.frame(Titanic)
> df <- subset(Tit, subset = Class=='1st' & Survived=='No',select=c(Sex,Age,Freq))
> df
      Sex   Age Freq
1    Male Child    0
5  Female Child    0
9    Male Adult  118
13 Female Adult    4



             MERGING DATAFRAMES
Exercise 11
 a)

Create the following dataframes to merge:
buildings&lt;- data.frame(location=c(1, 2, 3), name=c(&quot;building1&quot;, &quot;building2&quot;,&quot;building3&quot;))
data &lt;-
data.frame(survey=c(1,1,1,2,2,2),location=c(1,2,3,2,3,1),efficiency=c(51,64,70,7,80,58))

The dataframes, buildingsand datahave a common key variable called, “location”.
Use the merge() function to merge the two dataframes by “location”, into a new
dataframe,“buildingStats”.
Exercise 11
 b)
Give the dataframes different key variable names:
buildings&lt;- data.frame(location=c(1, 2, 3), name=c(&quot;building1&quot;,&quot;building2&quot;, &quot;building3&quot;))
data &lt;- data.frame(survey=c(1,1,1,2,2,2), LocationID=c(1,2,3,2,3,1),
efficiency=c(51,64,70,71,80,58))
The dataframes, buildings and data have corresponding variables called, location, and
LocationID. Use the merge() function to merge the columns of the two dataframes by the
corresponding variables.



CODE:
OUTPUT:


                  DIFFERENT TYPES OF MERGE IN R




Exercise 12
a)InnerJoin:
The R merge() function automatically joins the frames by common variable names. In that
case, demonstrate how you would perform the merge in Exercise 11a without specifying the
key variable.
Exercise 12
b)OuterJoin:
Merge the two dataframes from Exercise 11a. Use the “all=” parameter in the merge()
function to return all records from both tables. Also, merge with the key variable, “location”.
Exercise 12
c)Left Join:
Merge the two dataframes from Exercise 11a, and return all rows from the left table. Specify
the matching key from Exercise 11a.
Exercise 12
d)Right Join:
Merge the two dataframes from Exercise 11a, and return all rows from the right table. Use
the matching key from Exercise 11a to return matching rows from the left table.
Exercise 12
e)Cross Join:

Merge the two dataframes from Exercise 11a, into a “Cross Join” with each row of
“buildings” matched to each row of “data”. What new column names are created in
“buildingStats”?



CODE:
OUTPUT:



Exercise 13
MergingDataframe rows:
To join two data frames (datasets) vertically, use the rbind function. The two data frames must
have the same variables, but they do not have to be in the same order.
Merge the rows of the following two dataframes:
buildings&lt;- data.frame(location=c(1, 2, 3), name=c(&quot;building1&quot;,
&quot;building2&quot;, &quot;building3&quot;))
buildings2 &lt;- data.frame(location=c(5, 4, 6), name=c(&quot;building5&quot;, &quot;building4&quot;, &quot;building6&quot;))
Also, specify the new dataframe as, “allBuidings”.


CODE:
OUTPUT:



Exercise 14
Create a new dataframe, buildings3, that has variables not found in the previous dataframes.
buildings3 &lt;- data.frame(location=c(7, 8, 9), name=c(&quot;building7&quot;, &quot;building8&quot;, &quot;building9&quot;),
startEfficiency=c(75,87,91))
Create a new buildings3 without the extra variables.


CODE:
OUTPUT:




Exercise 15
Instead of deleting the extra variables from buildings3 . append the buildings, and buildings2
with the new variable in buildings3, (from Exercise 14). Set the new data in buildings and
buildings2 , (from Exercise 13), to NA.



CODE:
OUTPUT:
